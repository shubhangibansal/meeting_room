"use strict";

var util = require('util');
var request = require('request');
var cookie = require('cookie');
var redisClient = require('redis').createClient(6379,"127.0.0.1",{});


var m_room = {
	userLogin: function(req, res, next){

		if(!req){
			return next("Your session has not been created, you are not authenticated to login");
		}
			if(req.headers.cookie  && (!req.session.username || req.session.username !== req.body.user) ){
				console.log("####### creating session ######");
				req.session.username = req.body.user;
				req.session.isLogin = true;
			}else if(!req.headers.cookie && req.session && !req.session.username){
				console.log("setting cookie and session for the first time for the current user");
				req.session.username = req.body.user;
				req.session.isLogin = true;
			}
			else if(!req.session && !req.headers.cookie){
				return next("Your session can't be created, you are not authenticated to login");
			}else{
				console.log("session exists for user :", req.session.username);
			}
			res.json({"message" : "login successful"});
	},

	userLogout: function(req, res, next){

		//on logout we delete users session
		console.log("destroying current user session");
		req.session.destroy(function(err){
			if(err){
				return next("session destroyed for current user");
			}
		});
		res.json({"message" : "successfully logged out of subsystem"});
	},

	bookMeet: function(req, res, next) {
		var error;
	
		if(!req.session || !req.session.username){
			return next("You are not logged in to perform this task"); 
		}else{
			console.log(req.session.username+" is logged in to book a meeting room");
		}
		
		//check for mandatory params, even if single is missing , it will throw error.
		var mandatParams = ['calendarid','s_time', 'duration', 's_date', 'subject'].some(function(key){
			return (!req.body[key]);
		});

		
		if(mandatParams === false){
			return next("Manadatory params missing (calendarid, start_time, duration, start_date, subject)");
		}

		var data = {
			url : 'http://meetingserver.com/'+req.body.calendarid,
			method : 'POST',
		};


		request(data, function(err, result, bodyData){

			err = null;
			bodyData = '1';  // or bodyData = 'fail';

			/**
			 * Hard Coding the above response from Api
			 * returning mid which will be autogenerated as it will be a unique identifier in the table
			 * where the data is getting stored.
			 * 
			 */
			
			 //statusCode check made to ensure error to be thrown in case of timeout

			if(err || !res.statusCode || res.statusCode != 200 || !bodyData){
				return next("No Booking could be done.Request failed");
			}
			if(bodyData === 'fail'){
				return next("Meeting can't be booked,May be slot already booked");
				
			}
			bodyData = JSON.parse(bodyData);
			
			var response = "Booking made successfully with mid : "+bodyData;
			return res.json({"message": response});
			
		});

	},

	cancelMeet: function(req, res, next){

		var error;

		if(!req.session || !req.session.username){
			return next("You are not logged in to perform this task");
			
		}else{
			console.log(req.session.username+" is logged in to book a meeting room");
		}

		//check for mandatory params, even if single is missing , it will throw error.
		//mid is meeting id
		var mandatParams = ['calendarid','mid'].some(function(key){
			return (!req.body[key]);
		});


		if(mandatParams === false){
			return next("Manadatory params missing (calendarid, mid)");
		}

		var data = {
			url : 'http://meetingserver.com/'+req.body.calendarid+'/'+req.body.mid,
			method : 'DELETE',
		};


		request(data, function(err, result, bodyData){

			err = null;
			bodyData = 'ok';  // or bodyData = 'fail';

			/**
			 * Hard Coding the above response from Api
			 * returning mid which will be autogenerated as it will be a unique identifier in the table
			 * where the data is getting stored.
			 * 
			 */
			
			 //statusCode check made to ensure error to be thrown in case of timeout

			if(err || !res.statusCode || res.statusCode != 200  || !bodyData){
				return next("Cancellation could not be done.Request failed");
				
			}
			if(bodyData === 'fail'){
				return next("Meeting can't be Cancelled.May be entry matching the request doesnt exist");
				
			}
		
			var response = "Cancellation done successfully for calendar id : "+req.body.calendarid;
			return res.json({"message": response});
			
		});

	}, 

	usersInSession: function(req, res, next){
		var error;
		var sessData = {};
		
		//only allowing ADMIN user to check the status of the logged in users
		if(req && req.session && req.session.username === 'ADMIN'){
				sessData.cookie = cookie.parse(req.headers.cookie);
				
				//var cookiename =sessData.cookie['m_room'].split('m_room:')[0];
        //sessData.sessionID = cookiename.split('.')[0];

        redisClient.keys("sess:*", function(err, keys){
        	if(err){
						return next("Error fetching count of logged in users");
					}else{
						if(req.query.getList && keys.length){
							
							req.keys = keys;

							next();
						}
							
						else
							return res.json({"Users_count" : keys.length});
					}
						
        });
		}else{
			return next("You are not authorized to view this information.");
			
		}
	},

	getUsersList: function(req, res, next){
		var arr = [];
		var response = {};
		var len = req.keys.length;
		if(req.keys){
			req.keys.forEach(function(sess){
				len--;
				redisClient.get(sess, function(err, user){
					
					if(err){
						return next("No session present");
					}
					var name = JSON.parse(user).username;
					

					response[name] = JSON.parse(user);
					arr.push(response);
					console.log(arr);
				});	
			
			});

			if(!len){
				req.list = arr;
			next();
			}		
					
		}

	},

	displayList : function(req, res, next){
		if(req.list){
			return res.json({"list" : req.list});
		}else
			return next("No list could be fetch");
	},

	error: function(err, req, res, next){console.log("## error ##",err);
		if(err || err.data || err.status){
			var response  = {};
			response.error = err;
			res.json(response);
		}
	}

};

module.exports = m_room;

(function(){
	if(require.main === module){
		
	}

}());
